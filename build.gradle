import com.github.jengelman.gradle.plugins.shadow.transformers.DontIncludeResourceTransformer

plugins {
    id 'java'
    id("com.gradleup.shadow") version "9.0.0-SNAPSHOT"
}

group = 'pl.kaxtusik'
version = '1.1-RELEASE'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.panda-lang.org/releases"
    }
    maven {
        url = "https://storehouse.okaeri.eu/repository/maven-public/"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
    maven {
        name = "tcoded-releases"
        url = "https://repo.tcoded.com/releases"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.18.2-R0.1-SNAPSHOT")
    implementation 'dev.rollczi:litecommands-bukkit:3.10.0'
    implementation 'eu.okaeri:okaeri-configs-yaml-bukkit:5.0.9'
    implementation 'eu.okaeri:okaeri-configs-serdes-bukkit:5.0.9'
    implementation("com.tcoded:FoliaLib:0.5.1")
    implementation("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

shadowJar {
    relocate "com.tcoded.folialib", "pl.kaxtusik.libs.folialib"
    relocate "dev.rollczi.litecommands", "pl.kaxtusik.libs.litecommands"
    relocate "eu.okaeri", "pl.kaxtusik.libs.okaeri"
    relocate("lombok", "pl.kaxtusik.libs.lombok")

    transform(DontIncludeResourceTransformer) {
        resource = "META-INF/MANIFEST.MF"
    }

    exclude 'META-INF/**'
    exclude("AUTHORS")
    exclude("changelog.txt")
    exclude("README.md")
    exclude("release-timestamp.txt")
    exclude("LICENSE")
    exclude("latestchanges.html")

    minimizeJar
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
